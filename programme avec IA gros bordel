using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Timers;

namespace scrabble
{

    class Program
    {

        public struct PIECE
        {
            public int val;
            public char nom;
            public int nb_restant;


        }

        public struct JOUEUR
        {
            public string nom;
            public int point;
            public int IA; // vaut 1 si le joueur est un ordi, 0 sinon

        }

        public static void intro()
        {
            Console.WriteLine("\n\n\n\n\n ***********    ***********    ********   ********    ******     ******     *           ******** ");
            Console.WriteLine(" *              *              *      *   *      *    *     *    *     *    *           *        ");
            Console.WriteLine(" *              *              *      *   *      *    *     *    *     *    *           *        ");
            Console.WriteLine(" *              *              *      *   *      *    *     *    *     *    *           *        ");
            Console.WriteLine(" ***********    *              ********   ********    ******     ******     *           *******  ");
            Console.WriteLine("           *    *              * *        *      *    *     *    *     *    *           *        ");
            Console.WriteLine("           *    *              *  *       *      *    *     *    *     *    *           *        ");
            Console.WriteLine("           *    *              *    *     *      *    *     *    *     *    *           *        ");
            Console.WriteLine(" ***********    **********     *      *   *      *    ******     ******     ********    *******  ");

            Console.Write("\n THOMAS F. ET CYRIL H., ELEVE EN 1ere ANNEE A L'ENSC, VOUS PRESENTE LEUR VERSION DU SCRABBLE. ENJOY & HAVE FUN!! \n\n appuyez sur entrée");
            Console.ReadLine();


        }

        public static void Main(string[] args)
        {
            Console.SetWindowSize(150, 58);
            System.Media.SoundPlayer player = new System.Media.SoundPlayer(@"Tetris.wav");
            player.Play();
            Console.Title = "LE SCRABBLE par THOMAS FAUQUIGNON et CYRIL HATCHI 1A ENSC";
            Console.SetWindowSize(150, 58);

            bool partieFinie = false;

            intro();

            JOUER(ref partieFinie, player);
        }

        public static int demandeEntier() // fonction qui demande un entier et renvoie un message d'erreur si s'en est pas un
        {
            bool ok = false;
            int nb = 0;
            while (!ok)//gère le cas où l'utilisateur ne rentre pas un nombre
            {
                try
                {
                    nb = int.Parse(Console.ReadLine());
                    ok = true;
                }
                catch (Exception)
                {

                    Console.Write("\n Ce n'est pas un nombre, veuillez réssayer\n");
                }
            }
            return nb;
        }
        public static string demandeOUI_NON()
        {
            string réponse;
            do
            {
                réponse = Console.ReadLine();
                if (réponse != "oui" && réponse != "non")
                {
                    Console.Write("\nTapez oui ou non \n");
                }
            } while (réponse != "oui" && réponse != "non");

            return réponse;
        }

        public static void JOUER(ref bool partieFinie, System.Media.SoundPlayer player)
        {


            int nbJoueurs = 0;
            PIECE[] tabLettre = new PIECE[30];//initialisation du sac de lettres
            Random rndNumbers = new Random();//génération de la séquence de nombres aléatoires

            Console.Write("\n_________________________________________________________________________________________________________________\n\nA combien voulez-vous jouer?(entre 1 et 4)\n");
            nbJoueurs = demandeEntier();
            if (nbJoueurs < 1 || nbJoueurs > 4)
            {
                do
                {
                    Console.Write("\n Ce n'est pas entre 1 et 4 !! Réessayez\n");
                    nbJoueurs = demandeEntier();
                } while (nbJoueurs < 1 || nbJoueurs > 4);
            }


            PIECE[,] tabMains = new PIECE[nbJoueurs, 7];
            PIECE lettre = new PIECE() { nom = ' ', val = 0, nb_restant = 0 };
            JOUEUR[] tabJoueur = new JOUEUR[nbJoueurs];
            int[,] tabcoef = new int[15, 15];// initialise les valeurs des cases du plateau de jeu
            int[,] tabVérif = new int[15, 15];//initialise le tableau pour vérifier si le mot est "collé" à un mot déjà posé 
            PIECE[,] tabcurseur = new PIECE[15, 15];
            int[,] positionLettre = new int[7, 2];

            initialisation(ref tabLettre, ref tabMains, nbJoueurs, ref tabJoueur, ref tabcoef, ref tabVérif, ref tabcurseur);

            Console.Write("\n\nInitialisation terminée ! A VOS MENINGES , LEST'S GO !\n");
            bool verifhorizontal = false;
            bool verifvertical = false;
            bool check1ereCase = true;
            bool checkAttaché = true;
            bool existe = true;
            bool piocheVide = true;
            bool mainVide = true;
            bool mainPleine = true;
            int compteFinTour;
            int a = 0;
            int b = 0;
            string défausse;
            int score = 0;
            int compte = 0;
            string[] mot;
            player.Stop();
            while (!partieFinie)
            {
                int numJoueur = 0;

                compteFinTour = 0;
                while (numJoueur <= nbJoueurs - 1)
                {

                    Console.Clear();
                    Console.Write("\n\nC'est au tour de {0}\n", tabJoueur[numJoueur].nom);
                    pioche(ref tabMains, ref tabLettre, numJoueur, rndNumbers, ref piocheVide);
                    check1ereCase = true;
                    checkAttaché = true;
                    existe = true;
                    affichecurseur(tabcurseur, -1, -1);
                    if (tabJoueur[numJoueur].IA == 0 && !piocheVide)
                    {
                        afficheMain(ref tabMains, numJoueur, tabJoueur, tabLettre);
                        Console.WriteLine("\n Voulez-vous vous défausser d'une ou plusieurs pièce(s) ?\n Ecrire oui / non ");
                        défausse = demandeOUI_NON();

                        if (défausse == "non")
                        {

                            positionnerPiece(tabcurseur, tabMains, numJoueur, tabJoueur, tabcoef, tabLettre, ref lettre, ref positionLettre, ref tabVérif, ref verifhorizontal, ref verifvertical, ref défausse, ref a, ref  b, ref compteFinTour);
                            mot = motPosé(tabcurseur, positionLettre, verifhorizontal, verifvertical, tabcoef, out score);
                            vérification(ref tabcurseur, tabcoef, ref tabJoueur, tabLettre, lettre, ref tabVérif, ref tabMains, ref positionLettre, numJoueur, ref verifvertical, ref verifhorizontal, out compte, out check1ereCase, ref checkAttaché, mot, ref score);
                            finPartie(ref partieFinie, tabMains, numJoueur, ref mainVide, piocheVide, ref tabJoueur, nbJoueurs);
                        }

                        int i = 0;
                        while (i < 7 && mainPleine)
                        {
                            if (tabMains[numJoueur, i].nom == ' ')
                            {
                                mainPleine = false;
                            }
                            i++;
                        }

                        if (!mainPleine)
                        {
                            if (!check1ereCase)
                            {
                                Console.WriteLine("\n La case du milieu doit être utilisée au premier tour! next \n");
                                Console.ReadLine();
                                motRefuse(ref tabcurseur, tabLettre, ref tabMains, ref positionLettre, numJoueur, tabVérif, ref score);
                            }
                            if (checkAttaché)
                            {
                                Console.WriteLine("\n Le mot doit être lié à un mot déjà présent sur le tableau! next \n ");
                                motRefuse(ref tabcurseur, tabLettre, ref tabMains, ref positionLettre, numJoueur, tabVérif, ref score);
                                Console.ReadLine();
                            }

                            if (!existe)
                            {
                                motRefuse(ref tabcurseur, tabLettre, ref tabMains, ref positionLettre, numJoueur, tabVérif, ref score);
                                Console.Write("\n Le mot n'existe pas ! Next \n");
                                Console.ReadLine();
                            }
                        }



                        if (check1ereCase && !checkAttaché && existe)
                        {
                            Console.Write("\nOk !\n");
                            tabJoueur[numJoueur].point = score + tabJoueur[numJoueur].point;
                            afficheScore(tabJoueur, nbJoueurs);
                        }

                        if (défausse == "oui")
                        {
                            int nbLettreEnlevee = 0;
                            do
                            {
                                if (piocheVide)
                                {
                                    Console.Write("\n Vous ne pouvez pas vous défausser car la pioche est piocheVide\n");
                                }
                                else
                                {
                                    Console.Clear();
                                    affichecurseur(tabcurseur, -1, -1);
                                    Console.WriteLine(" \nQuelle(s) lettre(s) voulez-vous enlever?");
                                    choixlettre(tabMains, numJoueur, tabcurseur, ref lettre, tabJoueur, tabLettre, défausse);
                                    nbLettreEnlevee++;
                                }
                            }
                            while (lettre.nom != '&' && nbLettreEnlevee <= 7 && !piocheVide);

                        }
                        numJoueur++;

                    }

                    else
                    {
                        if (tabJoueur[numJoueur].IA == 1)
                        {
                            pioche(ref tabMains, ref tabLettre, numJoueur, rndNumbers, ref piocheVide);
                            afficheMain(ref tabMains, numJoueur, tabJoueur, tabLettre);
                            numJoueur++;
                        }

                    }


                }
                if (compteFinTour == nbJoueurs && piocheVide)
                {
                    Console.Write("\n Tous les joueurs ont passés leur tour\nfin de la partie");
                    partieFinie = true;
                }

                Console.ReadLine();

            }
        }

        public static void initialisation(ref PIECE[] tabLettre, ref PIECE[,] tabMains, int nbJoueurs, ref JOUEUR[] tabJoueur, ref int[,] tabcoef, ref int[,] tabVérif, ref PIECE[,] tabcurseur)
        {
            //initialiser le SAC de lettres
            tabLettre[0] = new PIECE() { nom = 'A', val = 1, nb_restant = 9 };
            tabLettre[1] = new PIECE() { nom = 'B', val = 3, nb_restant = 2 };
            tabLettre[2] = new PIECE() { nom = 'C', val = 3, nb_restant = 2 };
            tabLettre[3] = new PIECE() { nom = 'D', val = 2, nb_restant = 3 };
            tabLettre[4] = new PIECE() { nom = 'E', val = 1, nb_restant = 15 };
            tabLettre[5] = new PIECE() { nom = 'F', val = 4, nb_restant = 2 };
            tabLettre[6] = new PIECE() { nom = 'G', val = 2, nb_restant = 2 };
            tabLettre[7] = new PIECE() { nom = 'H', val = 4, nb_restant = 2 };
            tabLettre[8] = new PIECE() { nom = 'I', val = 1, nb_restant = 8 };
            tabLettre[9] = new PIECE() { nom = 'J', val = 8, nb_restant = 1 };
            tabLettre[10] = new PIECE() { nom = 'K', val = 10, nb_restant = 1 };
            tabLettre[11] = new PIECE() { nom = 'L', val = 1, nb_restant = 5 };
            tabLettre[12] = new PIECE() { nom = 'M', val = 2, nb_restant = 3 };
            tabLettre[13] = new PIECE() { nom = 'N', val = 1, nb_restant = 6 };
            tabLettre[14] = new PIECE() { nom = 'O', val = 1, nb_restant = 6 };
            tabLettre[15] = new PIECE() { nom = 'P', val = 3, nb_restant = 2 };
            tabLettre[16] = new PIECE() { nom = 'Q', val = 8, nb_restant = 1 };
            tabLettre[17] = new PIECE() { nom = 'R', val = 1, nb_restant = 6 };
            tabLettre[18] = new PIECE() { nom = 'S', val = 1, nb_restant = 6 };
            tabLettre[19] = new PIECE() { nom = 'T', val = 1, nb_restant = 6 };
            tabLettre[20] = new PIECE() { nom = 'U', val = 1, nb_restant = 6 };
            tabLettre[21] = new PIECE() { nom = 'V', val = 4, nb_restant = 2 };
            tabLettre[22] = new PIECE() { nom = 'W', val = 10, nb_restant = 1 };
            tabLettre[23] = new PIECE() { nom = 'X', val = 10, nb_restant = 1 };
            tabLettre[24] = new PIECE() { nom = 'Y', val = 10, nb_restant = 1 };
            tabLettre[25] = new PIECE() { nom = 'Z', val = 10, nb_restant = 1 };
            tabLettre[26] = new PIECE() { nom = '*', val = 0, nb_restant = 2 };// joker
            tabLettre[27] = new PIECE() { nom = ' ', val = 0, nb_restant = 0 };
            tabLettre[28] = new PIECE() { nom = '&', val = 0, nb_restant = 0 };
            tabLettre[29] = new PIECE() { nom = '$', val = 0, nb_restant = 0 };
            int i = 0; int j = 0;

            //initialisation du tableau de mains
            while (i < nbJoueurs)
            {
                j = 0;
                while (j < 7)
                {
                    tabMains[i, j] = tabLettre[27];
                    j++;
                }
                i++;
            }

            //initialisation tabJoueur
            i = 0;

            while (i < nbJoueurs)
            {
                string ordi = " ";
                Console.Write("\n Quel est le nom du joueur {0}\n", i + 1);
                tabJoueur[i].nom = Console.ReadLine();
                if (i >= 1)
                {
                    while (tabJoueur[i].nom == tabJoueur[i - 1].nom)
                    {
                        Console.Write("\nce nom est déjà pris veuillez en entrer un autre\n");
                        tabJoueur[i].nom = Console.ReadLine();
                    }
                    if (i >= 2)
                    {
                        while (tabJoueur[i].nom == tabJoueur[i - 1].nom || tabJoueur[i].nom == tabJoueur[i - 2].nom)
                        {
                            Console.Write("\nce nom est déjà pris veuillez en entrer un autre\n");
                            tabJoueur[i].nom = Console.ReadLine();
                        }
                    }
                    if (i >= 3)
                    {
                        while (tabJoueur[i].nom == tabJoueur[i - 1].nom || tabJoueur[i].nom == tabJoueur[i - 2].nom || tabJoueur[i].nom == tabJoueur[i - 3].nom)
                        {
                            Console.Write("\nce nom est déjà pris veuillez en entrer un autre\n");
                            tabJoueur[i].nom = Console.ReadLine();
                        }
                    }
                }



                Console.WriteLine("\n Voulez vous que ce joueur soit traité par l'ordinateur? \n (oui/non)", i + 1);
                ordi = demandeOUI_NON();

                if (ordi == "oui")
                { tabJoueur[i].IA = 1; }//1 => IA
                else
                { tabJoueur[i].IA = 0; }
                tabJoueur[i].point = 0;
                i++;
            }

            //initialisation tabcoef
            i = 0; j = 0;
            for (i = 0; i < 15; i++)
            {
                for (j = 0; j < 15; j++)
                {
                    tabcoef[i, j] = 1;// case sans coeff particulier
                    if ((i == j || i == 14 - j || j == i - 14))
                    { tabcoef[i, j] = 4; } // mot compte double

                    if ((i == 0 && (j == 3 || j == 11)) ||
                        (i == 2 && (j == 6 || j == 8)) ||
                        (i == 3 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 6 && (j == 2 || j == 6 || j == 8 || j == 12)) ||
                        (i == 7 && (j == 3 || j == 11)) ||
                        (i == 8 && (j == 2 || j == 6 || j == 8 || j == 12)) ||
                        (i == 11 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 12 && (j == 6 || j == 8)) ||
                        (i == 14 && (j == 3 || j == 11)))
                    { tabcoef[i, j] = 2; }// lettre compte double


                    if ((i == 1 && (j == 5 || j == 9)) ||
                        (i == 5 && (j == 1 || j == 5 || j == 9 || j == 13)) ||
                        (i == 9 && (j == 1 || j == 5 || j == 9 || j == 13)) ||
                        (i == 13 && (j == 5 || j == 9)))
                    { tabcoef[i, j] = 3; }// lettre compte tripple


                    if ((i == 0 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 7 && (j == 0 || j == 14)) ||
                        (i == 14 && (j == 0 || j == 7 || j == 14)))
                    { tabcoef[i, j] = 5; }// mot compte triple

                }
            }

            //initialiser tabVérif
            i = 0; j = 0;
            while (i < 15)
            {
                while (j < 15)
                {
                    tabVérif[i, j] = 0;
                    j++;
                }
                j = 0;
                i++;
            }

            //initialiser tabcurseur
            for (int k = 0; k < tabcurseur.GetLength(0); k++)
            {
                for (int l = 0; l < tabcurseur.GetLength(0); l++)
                {
                    tabcurseur[k, l] = tabLettre[27];
                }
            }


        }

        public static void afficheMain(ref PIECE[,] tabMains, int numJoueur, JOUEUR[] tabJoueur, PIECE[] tabLettre)
        {
            int i = 0;

            Console.Write("\nmain de {0} :\n              =============================\n", tabJoueur[numJoueur].nom);
            Console.Write("              ");
            while (i < 7)
            {
                Console.Write("| {0} ", tabMains[numJoueur, i].nom);
                i++;
            }
            Console.Write("|");
            Console.Write(" finir le tour");
            Console.Write("\n              =============================\n");
            i = 0;
            Console.Write("leurs valeurs:");
            while (i < 7)
            {
                if (tabMains[numJoueur, i].val < 10)
                {
                    Console.Write("| {0} ", tabMains[numJoueur, i].val);
                }
                else
                {
                    Console.Write("|{0} ", tabMains[numJoueur, i].val);
                }// si la valeur est supérieure à 10, on ajuste le tableau en enlevant un espace 
                i++;
            }
            Console.Write("|");
            Console.Write("\n              =============================\n");
        }

        public static bool vérifMot(string mot_a_trouver)
        {
            System.Text.Encoding encoding = System.Text.Encoding.GetEncoding("iso-8859-1");
            StreamReader monStreamReader = new StreamReader("dico.txt", encoding);
            bool existe = false;
            string mot;
            int compteur = 0; // pour arréter la boucle dés que le mot est trouvé
            mot = monStreamReader.ReadLine();
            while (mot != mot_a_trouver && compteur == 0 && mot != null)
            {
                mot = monStreamReader.ReadLine();
                if (mot == mot_a_trouver)
                {
                    existe = true;
                    compteur = 1;
                }
            }
            monStreamReader.Close();
            return existe;
        }

        public static void affichecurseur(PIECE[,] tabcurseur, int k, int l)
        {


            Console.BackgroundColor = ConsoleColor.DarkGreen;
            Console.WriteLine("\n\n=============================================================");
            for (int i = 0; i < 15; i++)
            {
                for (int j = 0; j < 15; j++)
                {

                    Console.BackgroundColor = ConsoleColor.DarkGreen;
                    Console.Write("|");
                    if ((i == j || i == 14 - j || j == i - 14))
                    { Console.BackgroundColor = ConsoleColor.Magenta; } // mot compte double

                    if ((i == 0 && (j == 3 || j == 11)) ||
                        (i == 2 && (j == 6 || j == 8)) ||
                        (i == 3 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 6 && (j == 2 || j == 6 || j == 8 || j == 12)) ||
                        (i == 7 && (j == 3 || j == 11)) ||
                        (i == 8 && (j == 2 || j == 6 || j == 8 || j == 12)) ||
                        (i == 11 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 12 && (j == 6 || j == 8)) ||
                        (i == 14 && (j == 3 || j == 11)))
                    { Console.BackgroundColor = ConsoleColor.DarkCyan; }// lettre compte double


                    if ((i == 1 && (j == 5 || j == 9)) ||
                        (i == 5 && (j == 1 || j == 5 || j == 9 || j == 13)) ||
                        (i == 9 && (j == 1 || j == 5 || j == 9 || j == 13)) ||
                        (i == 13 && (j == 5 || j == 9)))
                    { Console.BackgroundColor = ConsoleColor.DarkBlue; }// lettre compte tripple


                    if ((i == 0 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 7 && (j == 0 || j == 14)) ||
                        (i == 14 && (j == 0 || j == 7 || j == 14)))
                    { Console.BackgroundColor = ConsoleColor.Red; }// mot compte triple
                    if (i == k && j == l)
                    { Console.BackgroundColor = ConsoleColor.Yellow; }// couleur du curseur
                    Console.Write(' ');
                    Console.Write(tabcurseur[i, j].nom);
                    Console.Write(' ');// espace plus grand avec la valeur de la case au milieu
                }
                Console.BackgroundColor = ConsoleColor.DarkGreen;
                Console.Write("|");
                Console.BackgroundColor = ConsoleColor.Black;
                Console.WriteLine(" " + (i + 1));
                Console.BackgroundColor = ConsoleColor.DarkGreen;

                Console.WriteLine("=============================================================");
            }
            Console.BackgroundColor = ConsoleColor.Black;
            Console.WriteLine("  A   B   C   D   E   F   G   H   I   J   K   L   M   N   O");

        }

        public static void choixlettre(PIECE[,] tabMains, int numJoueur, PIECE[,] tabcurseur, ref PIECE lettre, JOUEUR[] tabJoueur, PIECE[] tabLettre, string défausse)
        {
            char[] curseur = new char[8];
            for (int l = 0; l < 8; l++)
            {
                curseur[l] = ' ';
            }
            ConsoleKeyInfo touche; // touche entrée pour déplacer le curseur
            curseur[0] = '*';
            int i = 0;
            int j = 0;
            do
            {

                afficheMain(ref tabMains, numJoueur, tabJoueur, tabLettre);// affiche le tableau et la main
                Console.Write("              ");// ajustement du curseur sous la main
                for (i = 0; i < 8; i++)
                {
                    Console.Write(' ');
                    Console.Write(' ');
                    Console.Write(curseur[i]);
                    Console.Write(' ');
                }// affichage du tableau curseur
                touche = Console.ReadKey();//demande un caractère
                if (touche.Key == ConsoleKey.RightArrow && j < 7)// si flèche de droite
                {
                    curseur[j] = ' ';
                    curseur[j + 1] = '*';
                    j++;

                }
                if (touche.Key == ConsoleKey.LeftArrow && j > 0)// si flèche de gauche
                {
                    curseur[j - 1] = '*';
                    curseur[j] = ' ';
                    j--;
                }
                Console.Clear();
                affichecurseur(tabcurseur, -1, -1);//affichage du tableau sans curseur
            }

            while (touche.Key != ConsoleKey.Delete && touche.Key != ConsoleKey.Enter && j >= 0 && j < 8);
            if (j == 7)
            { lettre = tabLettre[28]; }// correspond à la validation
            else
            {
                if (touche.Key == ConsoleKey.Delete)// correspond à la suppression
                { lettre = tabLettre[29]; }
                else
                {
                    lettre = tabMains[numJoueur, j];
                    if (lettre.nom == tabLettre[26].nom)// si le joueur a choisi le joker
                    {
                        Console.Write(" par quelle lettre voulez-vous remplacer le joker?");
                        bool ok = false;
                        while (!ok)
                        {
                            try
                            {
                                lettre.nom = char.Parse(Console.ReadLine());// le joueur doit entrer une lettre
                                ok = true;
                            }

                            catch (Exception) // si ce n'est pas une lettre, il doit réessayer
                            { Console.WriteLine("ce n'est pas une lettre, veuillez réessayer"); }
                        }
                    }

                    tabMains[numJoueur, j] = tabLettre[27];//va effacer la case
                    if (défausse == "oui")// si la lettre choisie est pour la reposer dans la pioche
                    {
                        tabMains[numJoueur, j].nb_restant = tabMains[numJoueur, j].nb_restant + 1;
                    }
                }
            }


        }

        public static void positionnerPiece(PIECE[,] tabcurseur, PIECE[,] tabMains, int numJoueur, JOUEUR[] tabJoueur, int[,] tabcoef, PIECE[] tabLettre, ref PIECE lettre, ref int[,] positionLettre, ref int[,] tabVérif, ref bool verifhorizontal, ref bool verifvertical, ref string défausse, ref int a, ref int b, ref int compteFinTour)
        {
            ConsoleKeyInfo touche;
            int compte = 0;
            int score = 0;
            lettre.nom = ' ';
            a = 0;
            b = 0;
            positionLettre = new int[7, 2];// enregistre les positions des pièces posées pendant le tour

            verifhorizontal = false;
            verifvertical = false;

            while (compte < 7 && (lettre.nom != '&'))//tabcurseur[7, 7].nom == ' '
            {
                Console.Clear();
                affichecurseur(tabcurseur, -1, -1);
                choixlettre(tabMains, numJoueur, tabcurseur, ref lettre, tabJoueur, tabLettre, défausse);
                if (lettre.nom == '$')// si l'utilisateur a choisi de supprimer
                {
                    motRefuse(ref tabcurseur, tabLettre, ref tabMains, ref positionLettre, numJoueur, tabVérif, ref score);
                    verifhorizontal = false;
                    verifvertical = false;
                }
                if (lettre.nom == '&')
                {
                    compteFinTour++;
                }
                if (lettre.nom != '&')// si la lettre vaut '&' c'est que l'utilisateur a validé
                {

                    do
                    {
                        Console.Clear();
                        affichecurseur(tabcurseur, a, b);
                        afficheMain(ref tabMains, numJoueur, tabJoueur, tabLettre);
                        touche = Console.ReadKey();// choix du caractère de déplacement

                        if (touche.Key == ConsoleKey.RightArrow && b < tabcurseur.GetLength(0) - 1 && !verifvertical)// si flèche de droite
                        {
                            b++;
                        }
                        if (touche.Key == ConsoleKey.LeftArrow && b > 0 && !verifvertical)// si flèche de gauche
                        {
                            b--;
                        }
                        if (touche.Key == ConsoleKey.DownArrow && a < tabcurseur.GetLength(1) - 1 && !verifhorizontal)// si flèche du bas
                        {
                            a++;
                        }
                        if (touche.Key == ConsoleKey.UpArrow && a > 0 && !verifhorizontal)// flèche du haut;
                        {
                            a--;
                        }



                        if (touche.Key == ConsoleKey.Escape)// pour annuler le choix d'une pièce
                        {
                            int j = 0;
                            while (tabMains[numJoueur, j].nom != ' ' && j < 7)
                            { j++; }
                            tabMains[numJoueur, j] = lettre;
                            lettre = tabLettre[27];// on replace la lettre annulée
                            compte--;
                        }
                        if (touche.Key == ConsoleKey.Delete)
                        {
                            score = 0;
                            motRefuse(ref tabcurseur, tabLettre, ref tabMains, ref positionLettre, numJoueur, tabVérif, ref score);
                            verifhorizontal = false;
                            verifvertical = false;
                            compte = 0;
                        }

                    } while (touche.Key != ConsoleKey.Escape && touche.Key != ConsoleKey.Enter || (tabcurseur[a, b].nom != ' ') || (compte == 1 && (positionLettre[compte - 1, 0] != a && positionLettre[compte - 1, 1] != b)) || (verifhorizontal && a != positionLettre[1, 0]));
                    // condition d'arrêt: validée avec entrée et case piocheVide
                    if (lettre.nom != ' ' && touche.Key != ConsoleKey.Escape)//si lettre annulée ou mot supprimmé
                    {
                        positionLettre[compte, 0] = a;
                        positionLettre[compte, 1] = b;// permet de se rappeler de la position des lettre posées avant

                        if (compte == 1)
                        {
                            if (positionLettre[0, 0] == positionLettre[1, 0])
                            { verifhorizontal = true; }// si 2 premières lettres sur la même ligne, les autres devront l'être aussi
                            if (positionLettre[0, 1] == positionLettre[1, 1])
                            { verifvertical = true; }// si 2 premières lettres sur la même colonnes, les autres devront l'être aussi
                        }

                        tabcurseur[a, b] = lettre;
                    }


                }

                compte++;

            }




        }

        public static void pioche(ref PIECE[,] tabMains, ref PIECE[] tabLettre, int numJoueur, Random rndNumbers, ref bool piocheVide)
        {
            int lettreChoisie = 0;
            int nbTot = 0;
            int sommePartielle = 0;
            int j = 0; int l = 0; int k; // pour parcourir les tableaux
            piocheVide = false;
            j = 0;
            while (j < 7 && !piocheVide)
            {
                k = 0;
                nbTot = 0;
                while (k < 27) // on calcule le nb de pieces qui restantes
                {
                    nbTot = nbTot + tabLettre[k].nb_restant;
                    k++;
                }
                if (nbTot == 0)
                {
                    piocheVide = true;
                    Console.WriteLine("\nil ne reste plus aucune pièce\n");
                }
                if (tabMains[numJoueur, j].nom == ' ' && !piocheVide)
                {
                    lettreChoisie = rndNumbers.Next(1, nbTot); // on prend une pièce au hasard parmi toutes les pièces restantes

                    l = 0;
                    sommePartielle = 0;
                    while (sommePartielle < lettreChoisie)// on cherche la plage de valeurs de la lettre correspondante au nombre aléatoire ( entre 1 et 9 = A entre 10 et 11 = B etc ...)
                    {
                        if (tabLettre[l].nb_restant != 0)// on saute la lettre si il n'en reste pas3
                        {
                            sommePartielle = sommePartielle + tabLettre[l].nb_restant;
                        }
                        l++;
                    }
                    tabMains[numJoueur, j] = tabLettre[l - 1];
                    tabLettre[l - 1].nb_restant = tabLettre[l - 1].nb_restant - 1;
                }
                j++;

            }
        }

        public static string[] motPosé(PIECE[,] tabcurseur, int[,] positionLettre, bool verifhorizontal, bool verifvertical, int[,] tabcoef, out int score)
        {


            int l = 0;// pour parcourir les mots existants
            score = 0;
            bool stopvertical = true; // pour éviter les répétitions
            bool stophorizontal = true; // pour éviter les répétitions
            string[] motsposés = new string[8];// stock les différents mots qui ont pu se former


            for (int j = 0; j < 7; j++)
            {
                char[] motPosé = new char[15];// permet d'enregistrer le jeme mot
                int i = 0; // pour parcourir l'verticale ou la horizontale
                int compteLettre = 0;
                int b = positionLettre[j, 1];
                int a = positionLettre[j, 0];// pour simplifier l'écriture
                int motcptdouble = 1;
                int motcpttriple = 1;
                int scoreMot = 0;
                bool lettreposé = false;


                // on cherche la première lettre ( la plus à gauche)

                while (b > 0 && tabcurseur[a, b].nom != ' ' && stophorizontal)// on reste sur le plateau et on vérifie les mots horizontaux
                {
                    b--;// on se décale vers la gauche jusqu'à la première lettre
                }
                b++;

                while (b < 14 && tabcurseur[a, b].nom != ' ' && stophorizontal) // on repart dans l'autre sens jusqu'a la fin du mot sans sortir du tableau et on compte le nombre de lettre dans le mot
                {


                    for (int k = 0; k < 7; k++)
                    {
                        if (positionLettre[k, 0] == a && positionLettre[k, 1] == b)
                        { lettreposé = true; }
                    }
                    motPosé[i] = tabcurseur[a, b].nom;

                    if (lettreposé || verifhorizontal)
                    {
                        if (tabcoef[a, b] == 1 || tabcoef[a, b] == 2 || tabcoef[a, b] == 3)// si la lettre est posé sur une case avec un coef de 1,2 ou 3 (lettre comptes double, tripple ou case normale),
                        {
                            scoreMot = scoreMot + tabcurseur[a, b].val * tabcoef[a, b];
                        }
                        if (tabcoef[a, b] == 4)
                        {
                            motcptdouble = motcptdouble * 2;//coefficient mot compte double qui vaut 1 de base et 2 si on pose un lettre sur une case mot compte double
                            scoreMot = scoreMot + tabcurseur[a, b].val;
                        }
                        if (tabcoef[a, b] == 5)
                        {
                            motcpttriple = motcpttriple * 3;//coefficient mot compte tripple qui vaut 1 de base et 3 si on pose un lettre sur une case mot compte tripple
                            scoreMot = scoreMot + tabcurseur[a, b].val;
                        }

                        i++;
                        b++;
                        compteLettre++;
                    }

                }
                if (verifhorizontal) { stophorizontal = false; }
                if (compteLettre > 1)
                {
                    string motAvérifier = new string(motPosé);
                    motAvérifier = motAvérifier.Substring(0, compteLettre);
                    
                    if (motAvérifier.Length > 1)
                    {
                        scoreMot = scoreMot * motcptdouble * motcpttriple;// le score est multiplié par les coefficients mot compte double et tripple qui valent 1 si aucune lettre n'est sur une de ces cases.
                        score = score + scoreMot; // on ajoute la valeur du mot identifié au score du tour
                        motsposés[l] = motAvérifier;
                        l++;
                    }

                }
               



                motPosé = new char[15];// on réinitialise toutes les données avant de vérifier les mots verticaux
                i = 0; // pour parcourir l'verticale ou la horizontale
                compteLettre = 0;
                b = positionLettre[j, 1];
                a = positionLettre[j, 0];
                scoreMot = 0;
                motcptdouble = 1;
                motcpttriple = 1;


                while (a > 0 && tabcurseur[a, b].nom != ' ' && stopvertical)// on reste sur le plateau et on vérifie les mots verticaux
                {
                    a--;// on se décale vers le haut jusqu'à la première lettre
                }
                a++;
                while (a < 14 && tabcurseur[a, b].nom != ' ' && stopvertical) // on repart dans l'autre sens jusqu'a la fin du mot sans sortir du tableau et on compte le nombre de lettre dans le mot
                {
                    for (int k = 0; k < 7; k++)
                    {
                        if (positionLettre[k, 0] == a && positionLettre[k, 1] == b)
                        { lettreposé = true; }
                    }


                    motPosé[i] = tabcurseur[a, b].nom;
                    if (lettreposé || verifvertical)
                    {
                        if (tabcoef[a, b] == 1 || tabcoef[a, b] == 2 || tabcoef[a, b] == 3)// si la lettre est posé sur une case avec un coef de 1,2 ou 3 (lettre comptes double, tripple ou case normale),
                        {
                            scoreMot = scoreMot + tabcurseur[a, b].val * tabcoef[a, b];
                        }
                        if (tabcoef[a, b] == 4)
                        {
                            motcptdouble = motcptdouble * 2;//coefficient mot compte double qui vaut 1 de base et 2 si on pose un lettre sur une case mot compte double
                            scoreMot = scoreMot + tabcurseur[a, b].val;
                        }
                        if (tabcoef[a, b] == 5)
                        {
                            motcpttriple = motcpttriple * 3;//coefficient mot compte tripple qui vaut 1 de base et 3 si on pose un lettre sur une case mot compte tripple
                            scoreMot = scoreMot + tabcurseur[a, b].val;
                        }
                    }
                    i++;
                    a++;
                    compteLettre++;

                }


                if (verifvertical) { stopvertical = false; }

                if (compteLettre > 1)
                {
                    string motAvérifier = new string(motPosé);
                    motAvérifier = motAvérifier.Substring(0, compteLettre);
                    
                    if (motAvérifier.Length > 1)
                    { 
                        scoreMot = scoreMot * motcptdouble * motcpttriple;// le score est multiplié par les coefficients mot compte double et tripple qui valent 1 si aucune lettre n'est sur une de ces cases.
                        score = score + scoreMot;
                        motsposés[l] = motAvérifier;
                        l++;

                    }
                   
                }


            }
            for (int h = 0; h < 7; h++)
            { tabcoef[positionLettre[h, 0], positionLettre[h, 1]] = 1; }// une fois que les scores des différents mots formés on été calculés on écrase les différents coefficients qui ne pourront plus être utilisés
            return motsposés;

        }

        public static void motRefuse(ref PIECE[,] tabcurseur, PIECE[] tabLettre, ref PIECE[,] tabMains, ref int[,] positionLettre, int numJoueur, int[,] tabverif, ref int score)
        {
            int j = 0;
            score = 0;
            for (int i = 0; i < 7 && tabcurseur[positionLettre[i, 0], positionLettre[i, 1]].nom != ' '; i++)
            {
                while (tabMains[numJoueur, j].nom != ' ')
                { j++; }
                if (tabcurseur[positionLettre[i, 0], positionLettre[i, 1]].val == 0)
                { tabMains[numJoueur, j] = tabLettre[26]; }
                tabMains[numJoueur, j] = tabcurseur[positionLettre[i, 0], positionLettre[i, 1]];
                tabcurseur[positionLettre[i, 0], positionLettre[i, 1]] = tabLettre[27];
                tabverif[positionLettre[i, 0], positionLettre[i, 1]] = 0;

                j++;
            }
            positionLettre = new int[7, 2];
        }

        public static void vérification(ref PIECE[,] tabcurseur, int[,] tabcoef, ref JOUEUR[] tabJoueur, PIECE[] tabLettre, PIECE lettre, ref int[,] tabVérif, ref PIECE[,] tabMains, ref int[,] positionLettre, int numJoueur, ref bool verifvertical, ref bool verifhorizontal, out int compte, out bool check1ereCase, ref bool checkAttaché, string[] mot, ref int score)
        {

            compte = 0;////on remet tout à 0
            check1ereCase = true;

            //si la première case n'est pas remplie, le mot est mal placé: le joueur reprend ses lettres et peut réessayer de poser son mot

            if (tabcurseur[7, 7].nom == ' ' && lettre.nom == '&')
            {

                motRefuse(ref tabcurseur, tabLettre, ref tabMains, ref positionLettre, numJoueur, tabVérif, ref score);
                check1ereCase = false;
            }

            //vérification que le mot soit "attaché" à un autre
            checkAttaché = true;

            if (check1ereCase)// si la première case est remplie
            {
                if (tabVérif[7, 7] == 1)
                {
                    int i = 0;
                    while (i < 7 && checkAttaché)
                    {
                        if (positionLettre[i, 0] - 1 >= 0)
                        {
                            if (tabVérif[positionLettre[i, 0] + 1, positionLettre[i, 1]] == 1 || tabVérif[positionLettre[i, 0] - 1, positionLettre[i, 1]] == 1 || tabVérif[positionLettre[i, 0], positionLettre[i, 1] + 1] == 1 || tabVérif[positionLettre[i, 0], positionLettre[i, 1] - 1] == 1)
                            {
                                checkAttaché = false;//==c'est ok
                            }
                        }
                        i++;
                    }

                    if (!checkAttaché)
                    {
                        i = 0;
                        while (i < 7)
                        {
                            tabVérif[positionLettre[i, 0], positionLettre[i, 0]] = 1;
                            i++;
                        }
                    }
                }

                if (tabVérif[7, 7] == 0)
                {
                    int temp = 0;
                    while (temp < 7)
                    {
                        tabVérif[positionLettre[temp, 0], positionLettre[temp, 1]] = 1;
                        temp++;
                    }
                    checkAttaché = false;//== false signifie que c'est bon
                }


            }


            //vérification que le mot est dans le dictionnaire
            if (check1ereCase && !checkAttaché)
            {
                bool existe = true;

                for (int i = 0; i < 8 && existe; i++)// si un des mots formé n'existe pas, le mot posé est refusé
                {
                    if (mot[i] != null)
                    {
                        existe = vérifMot(mot[i]);
                    }
                    if (!existe)
                    {
                        Console.Write(" \n le mot {0} n'existe pas", mot[i]);
                        motRefuse(ref tabcurseur, tabLettre, ref tabMains, ref positionLettre, numJoueur, tabVérif, ref score);
                        Console.ReadLine();
                    }
                }
            }
        }

        public static bool verifIA(PIECE[,] tabcurseur, JOUEUR[] tabJoueur, PIECE[] tabLettre, int a, int b, int[] espaceLibre, PIECE LettreDisponible, string motAposer, out int[] positionLettre, out bool horizontal)
        {// fonction qui  vérifie si un mot rentre dans l'espace disponible sur la grille.
            bool verif = false;
            bool verif1 = true;
            bool verif2 = true;
            bool verif3 = false;
            bool verif4 = false; // booleans vérifiant si le mot entre dans chaque direction
            horizontal = false;//pous savoir si le mot est horizontal ou vertical

            positionLettre = new int[motAposer.Length];// recense à quel endroit du mot se trouvent la lettre du plateau
            int compte = 0;
            for (int i = 0; i < motAposer.Length; i++)
            {
                if (LettreDisponible.nom == conversionStruct(tabLettre, motAposer)[i].nom)// position dans le mot de la lettre présente sur le plateau
                {
                    positionLettre[compte] = i + 1;
                    compte++;
                }
            }
            compte = 0;
            int j;
            {
                while (compte < motAposer.Length && !verif)
                    for (j = a; j < 14 && j < a + (motAposer.Length - positionLettre[compte]); j++)
                    {
                        if (tabcurseur[j + 1, b].nom != ' ')
                        { verif1 = false; }

                    }
                for (j = a; j > 0 && j < a - (positionLettre[compte] - 1); j--)
                {
                    if (tabcurseur[j - 1, b].nom != ' ')
                    { verif2 = false; }

                }
                if (verif1 && verif2)
                { verif = true; }

                for (j = b; j < 14 && j < b + (motAposer.Length - positionLettre[compte]); j++)
                {
                    if (tabcurseur[a, j + 1].nom != ' ')
                    { verif3 = false; }

                }
                for (j = b; j > 0 && j < j - (positionLettre[compte] - 1); j--)
                {
                    if (tabcurseur[a, j - 1].nom != ' ')
                    { verif4 = false; }

                }
                if (verif3 && verif4)
                {
                    verif = true;
                    horizontal = true;
                }
                compte++;
            }
            return verif;
        }

        public static void afficheMot(PIECE[,] tabcurseur, PIECE[,] tabMains, int[] espaceLibre, int a, int b, int numJoueur, PIECE[] motAplace, PIECE[] tabLettre, int[] positionLettre, bool horizontal)
        {
            int compte = 0;
            if (!horizontal)
            {
                for (int i = a - positionLettre[motAplace.Length]; compte < motAplace.Length && i < a + motAplace.Length - positionLettre[motAplace.Length]; a++)
                {
                    tabcurseur[i, b] = motAplace[compte];
                    compte++;
                    for (int j = 0; j < 7 && compte < motAplace.Length - 1; j++)
                    {
                        if (tabMains[numJoueur, j].nom == motAplace[compte].nom)// on efface les lettres posées
                        { tabMains[numJoueur, j] = tabLettre[27]; }
                    }
                }

            }
            else
            {
                compte = 0;
                for (int i = b - positionLettre[motAplace.Length]; i < a + motAplace.Length - positionLettre[motAplace.Length]; b++)
                {
                    tabcurseur[a, i] = motAplace[compte];
                    compte++;
                    for (int j = 0; j < 7; j++)
                    {
                        if (tabMains[numJoueur, i].nom == motAplace[compte].nom)
                        { tabMains[numJoueur, i] = tabLettre[27]; }
                    }
                }
            }



        }

        public static void finPartie(ref bool partieFinie, PIECE[,] tabMains, int numJoueur, ref bool mainVide, bool piocheVide, ref JOUEUR[] tabJoueur, int nbJoueurs)
        {
            // on regarde la main du joueur à la fin de son tour
            int i;
            int compteur;
            mainVide = false;
            compteur = 7; i = 0;

            while (i < 7)
            {
                if (tabMains[numJoueur, i].nom == ' ')
                {
                    compteur--;
                }
                i++;
            }
            if (compteur == 0)
            {
                mainVide = true;
            }
            i = 0;
            //si sa main est vide et que la pioche est vide alors la partie est finie
            if (mainVide && piocheVide)
            {
                Console.Write("\n la partie est finie\n");
                partieFinie = true;
                while (i < nbJoueurs)
                {
                    tabJoueur[numJoueur].point = tabJoueur[numJoueur].point + comptePointMain(tabMains, i);//il gagne les points des mains des autres joueurs
                    i++;
                }

            }

        }

        public static int comptePointMain(PIECE[,] tabMains, int joueur)//va compter les points de la main d'un joueur
        {
            int j;//va parcourir l'ensemble de la main des joueurs
            int pointTotal = 0;
            j = 0;
            while (j < 7)
            {
                pointTotal = pointTotal + tabMains[joueur, j].val;
                j++;
            }
            Console.Write(pointTotal);
            Console.ReadLine();
            return pointTotal;
        }

        public static void afficheScore(JOUEUR[] tabJoueur, int nbJoueurs)
        {

            // le tri ne marche pas !

            JOUEUR[] tabscore = new JOUEUR[nbJoueurs];
            JOUEUR temp;
            bool permut;

            do
            {
                // hypothèse : le tableau est trié
                permut = false;
                for (int i = 0; i < tabJoueur.Length - 1; i++)
                {
                    // Teste si 2 éléments successifs sont dans le bon ordre ou non
                    if (tabJoueur[i].point > tabJoueur[i + 1].point)
                    {
                        // s'ils ne le sont pas on échange leurs positions
                        temp = tabJoueur[i];
                        tabJoueur[i] = tabJoueur[i + 1];
                        tabJoueur[i + 1] = temp;
                        permut = true;
                    }
                }
            } while (permut);

            int j = nbJoueurs - 1;
            Console.Write("\n Tableau des scores:\n");
            int t = 1;
            while (j >= 0)
            {
                Console.WriteLine("A la place {0}: {1} avec {2} points\n", t, tabJoueur[j].nom, tabJoueur[j].point);
                t++;
                j--;
            }

            Console.ReadLine();

        }

        public static int[] chercheEspaceLibre(PIECE[,] tabcurseur, int a, int b)// fonction cherchant l'espace libre autour d'une case
        {
            int[] tabespaceLibre = new int[4];
            int espace = 0;
            int a2 = a;
            int b2 = b;
            while (a <= 14 && tabcurseur[a, b].nom != ' ')
            {
                a++;
                espace++;
            }
            tabespaceLibre[0] = espace;
            espace = 0;
            a = a2;
            while (a >= 0 && tabcurseur[a, b].nom != ' ')
            {
                a--;
                espace++;
            }
            tabespaceLibre[1] = espace;
            espace = 0;
            while (b <= 14 && tabcurseur[a, b].nom != ' ')
            {
                b++;
                espace++;
            }
            tabespaceLibre[3] = espace;
            espace = 0;
            b = b2;
            while (b >= 0 && tabcurseur[a, b].nom != ' ')
            {
                b--;
                espace++;
            }
            tabespaceLibre[3] = espace;

            return tabespaceLibre;
        }

        public static PIECE[] choixMotIA(PIECE[,] tabMains, PIECE[,] tabcurseur, int numJoueur, JOUEUR[] tabJoueur, PIECE[] tabLettre, PIECE LettreDisponible, int a, int b, int[] espaceLibre, out bool horizontal, out int[] positionLettre)
        {
            string motAplacer = " ";
            int score = 0;
            int i = 0;
            positionLettre = new int[4];
            afficheMain(ref tabMains, numJoueur, tabJoueur, tabLettre);
            horizontal = false;
            System.Text.Encoding encoding = System.Text.Encoding.GetEncoding("iso-8859-1");
            StreamReader monStreamReader = new StreamReader("dico.txt", encoding);
            string mot;
            mot = monStreamReader.ReadLine();
            while (mot != null) // on parcourt le dictionnaire
            {

                int scoreMot = 0;
                bool motAccepte = true;
                int[] noRepeat = { 0, 0, 0, 0, 0, 0, 0, 0 };// pour être sûr que chaque lettre ne soit utilisée qu'une seule fois
                for (i = 0; i < mot.Length && motAccepte; i++)
                {
                    int j = 0;
                    while (j < 7 && tabMains[numJoueur, j].nom != '*' && (mot[i] != tabMains[numJoueur, j].nom || mot[i] != LettreDisponible.nom || noRepeat[j] != 0 || noRepeat[7] != 0))// on cherche si la ieme lettre du mot est une des lettres de la main, ou si il y a un joker
                    {
                        j++;
                        if (j == 7)// si aucune lettre de la main ne convient, le mot est considéré comme faux
                        {
                            motAccepte = false;
                        }
                    }
                    if (mot[i] == LettreDisponible.nom && motAccepte)
                    {
                        noRepeat[7] = 1;
                        scoreMot = scoreMot + LettreDisponible.nom;
                    }

                    if (j < 7 && (motAccepte && mot[i] == tabMains[numJoueur, j].nom || tabMains[numJoueur, j].nom == '*'))// si la lettre du mot et celle de la main sont la même (ou si il y a un joker)
                    {
                        scoreMot = scoreMot + tabMains[numJoueur, j].val; // on ajoute la valeur de la lettre au score du mot
                        noRepeat[j] = 1;// sinon on indique que la jème lettre de la main a été utilisée
                    }
                }

                if (motAccepte)// si tout le mot a été parcouru sans avoir été considéré comme faux
                {
                    if (score < scoreMot)
                    {
                        score = scoreMot;
                        motAplacer = mot;
                    }
                    Console.Write(motAplacer);
                    Console.ReadLine();

                }
                mot = monStreamReader.ReadLine();
            }
            monStreamReader.Close();
            return conversionStruct(tabLettre, motAplacer);




        }

        public static void jouerBot(PIECE[,] tabcurseur, PIECE[,] tabMains, int numJoueur, JOUEUR[] tabJoueur, int[,] tabcoef, PIECE[] tabLettre)
        {
            bool horizontal;
            int[] positionLettre;
            if (tabcurseur[7, 7].nom == ' ')
            {
                int[] espaceLibreInitial = { 7, 7, 7, 7 };
                PIECE[] motIA = choixMotIA(tabMains, tabcurseur, numJoueur, tabJoueur, tabLettre, tabLettre[27], 7, 7, espaceLibreInitial, out horizontal, out positionLettre);
                afficheMot(tabcurseur, tabMains, espaceLibreInitial, 7, 7, numJoueur, motIA, tabLettre, positionLettre, horizontal);
                Console.ReadLine();
            }

            else
            {
                for (int i = 0; i < 14; i++)
                {
                    for (int j = 0; j < 14; j++)// on parcourt tout le tableau
                    {
                        if (tabcurseur[i, j].nom != ' ')
                        {

                            {
                                int[] espaceLibre = chercheEspaceLibre(tabcurseur, i, j);

                                PIECE[] motIA = choixMotIA(tabMains, tabcurseur, numJoueur, tabJoueur, tabLettre, tabcurseur[i, j], i, j, espaceLibre, out horizontal, out positionLettre);
                                afficheMot(tabcurseur, tabMains, espaceLibre, i, j, numJoueur, motIA, tabLettre, positionLettre, horizontal);

                            }
                        }
                    }
                }
            }



        }

        public static PIECE[] conversionStruct(PIECE[] tabLettre, string mot)
        {
            PIECE[] converti = new PIECE[mot.Length];
            for (int j = 0; j < mot.Length; j++)
            {
                for (int i = 0; i < 28; i++)
                {
                    if (mot[j] == tabLettre[i].nom)
                    { converti[j] = tabLettre[i]; }
                }
            }
            return converti;
        }
    }
}

