using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace scrabble
{
    class Program
    {
        public struct PIECE
        {
            public int val;
            public char nom;
            public int nb_restant;

        }

        public struct JOUEUR
        {
            public string nom;
            public int point;
        }




        public static void Main(string[] args)
        {
            PIECE[] tabLettre = { 
            new PIECE() { nom = 'A', val = 1, nb_restant = 9 },
            new PIECE() { nom = 'B', val = 3, nb_restant = 2 },
            new PIECE() { nom = 'C', val = 3, nb_restant = 2 },
            new PIECE() { nom = 'D', val = 2, nb_restant = 3 },
            new PIECE() { nom = 'E', val = 1, nb_restant = 15 },
            new PIECE() { nom = 'F', val = 4, nb_restant = 2 },
            new PIECE() { nom = 'G', val = 2, nb_restant = 2 },
            new PIECE() { nom = 'H', val = 4, nb_restant = 2 },
            new PIECE() { nom = 'I', val = 1, nb_restant = 8 },
            new PIECE() { nom = 'J', val = 8, nb_restant = 1 },
            new PIECE() { nom = 'K', val = 10, nb_restant = 1},
            new PIECE() { nom = 'L', val = 1, nb_restant = 5 },
            new PIECE() { nom = 'M', val = 2, nb_restant = 3 },
            new PIECE() { nom = 'N', val = 1, nb_restant = 6 },
            new PIECE() { nom = 'O', val = 1, nb_restant = 6 },
            new PIECE() { nom = 'P', val = 3, nb_restant = 2 },
            new PIECE() { nom = 'Q', val = 8, nb_restant = 1 },
            new PIECE() { nom = 'R', val = 1, nb_restant = 6 },
            new PIECE() { nom = 'S', val = 1, nb_restant = 6 },
            new PIECE() { nom = 'T', val = 1, nb_restant = 6},
            new PIECE() { nom = 'U', val = 1, nb_restant = 6 },
            new PIECE() { nom = 'V', val = 4, nb_restant = 2 },
            new PIECE() { nom = 'W', val = 10, nb_restant = 1},
            new PIECE() { nom = 'X', val = 10, nb_restant = 1 },
            new PIECE() { nom = 'Y', val = 10, nb_restant = 1 },
            new PIECE() { nom = 'Z', val = 10, nb_restant = 1 },
            new PIECE() { nom ='*', val = 0 , nb_restant = 2} };


            int nbJoueurs; int IA;
            Console.Write("combien de joueur humain ?\n");
            nbJoueurs = int.Parse(Console.ReadLine());
            Console.Write("combien de joueur IA ?\n");
            IA = int.Parse(Console.ReadLine());
            int i = 0;
            JOUEUR[] tabJoueur = new JOUEUR[nbJoueurs];
            while (i < nbJoueurs)
            {
                Console.Write("nom du joueur {0}\n", i + 1);
                tabJoueur[i].nom = Console.ReadLine();
                i++;

            }

            char[,] tabMains = new char[nbJoueurs, 7];
            i = 0; int j = 0;
            while (i < nbJoueurs)//initialisation du tableau de mains
            {
                j = 0;
                while (j < 7)
                {
                    tabMains[i, j] = ' ';
                    j++;
                }
                i++;
            }

            pioche(ref tabMains, ref tabLettre, nbJoueurs);
            i = 1;
            while (i <= nbJoueurs)
            {
                afficheMain(ref tabMains, i, tabJoueur);
                i++;
            }
            Console.Write(" \n");

            Console.ReadLine();
            int[,] tabcoef = new int[15, 15];
            for (i = 0; i < 15; i++)
            {
                for (j = 0; j < 15; j++)
                {
                    tabcoef[i, j] = 1;// case sans coeff particulier
                    if ((i == j || i == 14 - j || j == i - 14))
                    { tabcoef[i, j] = 4; } // mot compte double

                    if ((i == 0 && (j == 3 || j == 11)) ||
                        (i == 2 && (j == 6 || j == 8)) ||
                        (i == 3 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 6 && (j == 2 || j == 6 || j == 8 || j == 12)) ||
                        (i == 7 && (j == 3 || j == 11)) ||
                        (i == 8 && (j == 2 || j == 6 || j == 8 || j == 12)) ||
                        (i == 11 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 12 && (j == 6 || j == 8)) ||
                        (i == 14 && (j == 3 || j == 11)))
                    { tabcoef[i, j] = 2; }// lettre compte double


                    if ((i == 1 && (j == 5 || j == 9)) ||
                        (i == 5 && (j == 1 || j == 5 || j == 9 || j == 13)) ||
                        (i == 9 && (j == 1 || j == 5 || j == 9 || j == 13)) ||
                        (i == 13 && (j == 5 || j == 9)))
                    { tabcoef[i, j] = 3; }// lettre compte tripple


                    if ((i == 0 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 7 && (j == 0 || j == 14)) ||
                        (i == 14 && (j == 0 || j == 7 || j == 14)))
                    { tabcoef[i, j] = 5; }// mot compte triple

                }
            }

            char[,] tabcurseur = new char[15, 15];


            for (int k = 0; k < tabcurseur.GetLength(0); k++)
            {
                for (int l = 0; l < tabcurseur.GetLength(0); l++)
                {
                    tabcurseur[k, l] = ' ';
                }
            }
            Console.Clear();
            i = 1;
            while (i <= nbJoueurs)
            {
                Console.Write("\n\nc'est au tour de {0}\n", tabJoueur[i - 1].nom);
                positionnerPiece(tabcurseur, tabMains, i, tabJoueur);
                i++;
            }
            Console.ReadLine();




        }

        public static void afficheMain(ref char[,] tabMains, int num_Joueur, JOUEUR[] tabJoueur)
        {
            int i;
            i = 0;
            Console.Write(" \nmain de {0} : \n", tabJoueur[num_Joueur - 1].nom);
            Console.Write("\n=============================\n");
            while (i < 7)
            {

                Console.Write("| {0} ", tabMains[num_Joueur - 1, i]);
                i++;
            }
            Console.Write("|");
            Console.Write(" valider");
            Console.Write("\n=============================\n");
        }

        public static bool vérifMot(string mot_a_trouver)
        {
            System.Text.Encoding encoding = System.Text.Encoding.GetEncoding("iso-8859-1");
            StreamReader monStreamReader = new StreamReader("dico.txt", encoding);
            Console.Write("Lecture du dictionnaire, veuillez patienter...");
            bool existe = false;
            string mot;
            int compteur = 0; // pour arréter la boucle dés que le mot est trouvé
            mot = monStreamReader.ReadLine();
            while (mot != mot_a_trouver && compteur == 0)
            {
                mot = monStreamReader.ReadLine();
                if (mot == mot_a_trouver)
                {
                    existe = true;
                    compteur = 1;
                }
            }
            monStreamReader.Close();
            return existe;
        }
        public static void affichecurseur(char[,] tabcoef, int k, int l)
        {


            Console.BackgroundColor = ConsoleColor.DarkGreen;
            Console.WriteLine("\n\n=============================================================");
            for (int i = 0; i < 15; i++)
            {
                for (int j = 0; j < 15; j++)
                {

                    Console.BackgroundColor = ConsoleColor.DarkGreen;
                    Console.Write("|");
                    if ((i == j || i == 14 - j || j == i - 14))
                    { Console.BackgroundColor = ConsoleColor.Magenta; } // mot compte double

                    if ((i == 0 && (j == 3 || j == 11)) ||
                        (i == 2 && (j == 6 || j == 8)) ||
                        (i == 3 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 6 && (j == 2 || j == 6 || j == 8 || j == 12)) ||
                        (i == 7 && (j == 3 || j == 11)) ||
                        (i == 8 && (j == 2 || j == 6 || j == 8 || j == 12)) ||
                        (i == 11 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 12 && (j == 6 || j == 8)) ||
                        (i == 14 && (j == 3 || j == 11)))
                    { Console.BackgroundColor = ConsoleColor.DarkCyan; }// lettre compte double


                    if ((i == 1 && (j == 5 || j == 9)) ||
                        (i == 5 && (j == 1 || j == 5 || j == 9 || j == 13)) ||
                        (i == 9 && (j == 1 || j == 5 || j == 9 || j == 13)) ||
                        (i == 13 && (j == 5 || j == 9)))
                    { Console.BackgroundColor = ConsoleColor.DarkBlue; }// lettre compte tripple


                    if ((i == 0 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 7 && (j == 0 || j == 14)) ||
                        (i == 14 && (j == 0 || j == 7 || j == 14)))
                    { Console.BackgroundColor = ConsoleColor.Red; }// mot compte triple
                    if (i == k && j == l)
                    { Console.BackgroundColor = ConsoleColor.Yellow; }// couleur du curseur
                    Console.Write(' ');
                    Console.Write(tabcoef[i, j]);
                    Console.Write(' ');// espace plus grand avec la valeur de la case au milieu
                }
                Console.BackgroundColor = ConsoleColor.DarkGreen;
                Console.Write("|");
                Console.BackgroundColor = ConsoleColor.Black;
                Console.WriteLine(" " + (i + 1));
                Console.BackgroundColor = ConsoleColor.DarkGreen;

                Console.WriteLine("=============================================================");
            }
            Console.BackgroundColor = ConsoleColor.Black;
            Console.WriteLine("  A   B   C   D   E   F   G   H   I   J   K   L   M   N   O");

        }

        public static void choixlettre(char[,] tabMains, int num_joueur, char[,] tabcoef, int a, int b, out char lettre, JOUEUR[] tabJoueur)
        {
            char[] curseur = new char[8];
            for (int l = 0; l < 8; l++)
            { curseur[l] = ' '; }
            ConsoleKeyInfo touche; // touche entrée pour déplacer le curseur
            curseur[0] = '*';
            curseur = new char[8];// remet le tableau curseur à 0
            int i = 0;
            int j = 0;
            do
            {

                afficheMain(ref tabMains, num_joueur, tabJoueur);// affiche le tableau et la main
                for (i = 0; i < 8; i++)
                {
                    Console.Write(' ');
                    Console.Write(' ');
                    Console.Write(curseur[i]);
                    Console.Write(' ');
                }// affichage du tableau curseur

                touche = Console.ReadKey();// demande d'un caractère
                if (touche.Key == ConsoleKey.RightArrow && j < 7)// si flèche de droite
                {
                    curseur[j] = ' ';
                    curseur[j + 1] = '*';
                    j++;

                }
                if (touche.Key == ConsoleKey.LeftArrow && j > 0)// si flèche de gauche
                {
                    curseur[j - 1] = '*';
                    curseur[j] = ' ';
                    j--;
                }
                Console.Clear();
                affichecurseur(tabcoef, a, b);
            }
            while (touche.Key != ConsoleKey.Enter && j >= 0 && j < 8);
            if (j == 7)
            { lettre = '&'; }// correspond à la validation
            else
            {
                lettre = tabMains[num_joueur - 1, j];

                tabMains[num_joueur - 1, j] = ' ';
            }


        }
        static void positionnerPiece(char[,] tabcurseur, char[,] tabMains, int num_joueur, JOUEUR[] tabJoueur)// mettre joueur en paramètre de la fonction
        {
            ConsoleKeyInfo cki;
            int compte = 0;
            int a = 0;
            int b = 0;

            char lettre;
            int[,] positionlettre = new int[7, 2];
            bool verifA = false;
            bool verifB = false;

            do
            {
                affichecurseur(tabcurseur, a, b);
                choixlettre(tabMains, num_joueur, tabcurseur, a, b, out lettre, tabJoueur);
                if (lettre != '&')// si la lettre vaut '&' c'est que l'utilisateur a validé
                {


                    do
                    {
                        Console.Clear();
                        affichecurseur(tabcurseur, a, b);
                        afficheMain(ref tabMains, num_joueur, tabJoueur);
                        cki = Console.ReadKey();// choix du caractère de déplacement
                        if (cki.Key == ConsoleKey.RightArrow && b < tabcurseur.GetLength(0) - 1)// si flèche de droite
                        {
                            b++;
                        }
                        if (cki.Key == ConsoleKey.LeftArrow && b > 0)// si flèche de gauche
                        {
                            b--;
                        }
                        if (cki.Key == ConsoleKey.DownArrow && a < tabcurseur.GetLength(1) - 1)// si flèche du bas
                        {
                            a++;
                        }
                        if (cki.Key == ConsoleKey.UpArrow && a > 0)// flèche du haut;
                        {
                            a--;
                        }



                        Console.Clear();

                    }
                    while (cki.Key != ConsoleKey.Enter || (tabcurseur[a, b] != ' ') || (compte == 1 && (positionlettre[compte - 1, 0] != a && positionlettre[compte - 1, 1] != b)) || (verifA && a != positionlettre[1, 0]) || (verifB && b != positionlettre[1, 1]));
                    // condition d'arrêt: validée avec entrée et case vide et si 2e coup: être sur la même ligne ou rangée que la première case
                    // si plus du 2e coup: doit être sur la ligne formée par les 2 premières lettres
                    positionlettre[compte, 0] = a;
                    positionlettre[compte, 1] = b;// permet de se rappeler de la position des lettre posées avant

                    if (compte == 1)
                    {
                        if (positionlettre[0, 0] == positionlettre[1, 0])
                        { verifA = true; }// si 2 premières lettres sur la même ligne, les autres devront l'être aussi
                        if (positionlettre[0, 1] == positionlettre[1, 1])
                        { verifB = true; }// si 2 premières lettres sur la même colonnes, les autres devront l'être aussi
                    }

                    tabcurseur[a, b] = lettre;


                    affichecurseur(tabcurseur, a, b);
                    Console.Clear();
                    compte++;
                }
            }
            while (compte < 7 && (lettre != '&'));



        }
        public static void pioche(ref char[,] tabMains, ref PIECE[] tabLettre, int nbJoueurs)
        {
            int i = 0; int j = 0;
            Random rndNumbers = new Random(); // on génère un nombre aléatoire qui va correspondre à une lettre
            int lettreChoisie = 0;
            while (i < nbJoueurs)
            {
                j = 0;
                while (j < 7)
                {
                    if (tabMains[i, j] == ' ')
                    {
                        lettreChoisie = rndNumbers.Next(0, 26);
                        while (tabLettre[lettreChoisie].nb_restant == 0)// on prends une autre lettre si il n'y en a plus dans la pioche
                        {
                            lettreChoisie = rndNumbers.Next(0, 26);
                        }
                        tabMains[i, j] = tabLettre[lettreChoisie].nom;
                        tabLettre[lettreChoisie].nb_restant = tabLettre[lettreChoisie].nb_restant - 1;
                    }
                    j++;
                }
                i++;
            }
        }

    }
}
