using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace scrabble
{
    class Program
    {
        public struct PIECE
        {
            public int val;
            public char nom;
            public int nb_restant;

        }

        public struct JOUEUR
        {
            public string nom;
            public int point;
        }

        public static void initialisation(ref PIECE[] tabLettre, ref PIECE[,] tabMains, int nbJoueurs, ref JOUEUR[] tabJoueur, ref int[,] tabcoef, ref int[,] tabVérif, ref PIECE[,] tabcurseur)
        {
            //initialiser le SAC de lettres
            tabLettre[0] = new PIECE() { nom = 'A', val = 1, nb_restant = 9 };
            tabLettre[1] = new PIECE() { nom = 'B', val = 3, nb_restant = 2 };
            tabLettre[2] = new PIECE() { nom = 'C', val = 3, nb_restant = 2 };
            tabLettre[3] = new PIECE() { nom = 'D', val = 2, nb_restant = 3 };
            tabLettre[4] = new PIECE() { nom = 'E', val = 1, nb_restant = 15 };
            tabLettre[5] = new PIECE() { nom = 'F', val = 4, nb_restant = 2 };
            tabLettre[6] = new PIECE() { nom = 'G', val = 2, nb_restant = 2 };
            tabLettre[7] = new PIECE() { nom = 'H', val = 4, nb_restant = 2 };
            tabLettre[8] = new PIECE() { nom = 'I', val = 1, nb_restant = 8 };
            tabLettre[9] = new PIECE() { nom = 'J', val = 8, nb_restant = 1 };
            tabLettre[10] = new PIECE() { nom = 'K', val = 10, nb_restant = 1 };
            tabLettre[11] = new PIECE() { nom = 'L', val = 1, nb_restant = 5 };
            tabLettre[12] = new PIECE() { nom = 'M', val = 2, nb_restant = 3 };
            tabLettre[13] = new PIECE() { nom = 'N', val = 1, nb_restant = 6 };
            tabLettre[14] = new PIECE() { nom = 'O', val = 1, nb_restant = 6 };
            tabLettre[15] = new PIECE() { nom = 'P', val = 3, nb_restant = 2 };
            tabLettre[16] = new PIECE() { nom = 'Q', val = 8, nb_restant = 1 };
            tabLettre[17] = new PIECE() { nom = 'R', val = 1, nb_restant = 6 };
            tabLettre[18] = new PIECE() { nom = 'S', val = 1, nb_restant = 6 };
            tabLettre[19] = new PIECE() { nom = 'T', val = 1, nb_restant = 6 };
            tabLettre[20] = new PIECE() { nom = 'U', val = 1, nb_restant = 6 };
            tabLettre[21] = new PIECE() { nom = 'V', val = 4, nb_restant = 2 };
            tabLettre[22] = new PIECE() { nom = 'W', val = 10, nb_restant = 1 };
            tabLettre[23] = new PIECE() { nom = 'X', val = 10, nb_restant = 1 };
            tabLettre[24] = new PIECE() { nom = 'Y', val = 10, nb_restant = 1 };
            tabLettre[25] = new PIECE() { nom = 'Z', val = 10, nb_restant = 1 };
            tabLettre[26] = new PIECE() { nom = '*', val = 0, nb_restant = 2 };
            tabLettre[27] = new PIECE() { nom = ' ', val = 0, nb_restant = 0 };
            tabLettre[28] = new PIECE() { nom = '&', val = 0, nb_restant = 0 };
            int i = 0; int j = 0;

            //initialisation du tableau de mains
            while (i < nbJoueurs)
            {
                j = 0;
                while (j < 7)
                {
                    tabMains[i, j] = tabLettre[27];
                    j++;
                }
                i++;
            }

            //initialisation tabJoueur
            i = 0;
            while (i < nbJoueurs)
            {
                Console.Write("nom du joueur {0}\n", i + 1);
                tabJoueur[i].nom = Console.ReadLine();
                tabJoueur[i].point = 0;
                i++;
            }

            //initialisation tabcoef
            i = 0; j = 0;
            for (i = 0; i < 15; i++)
            {
                for (j = 0; j < 15; j++)
                {
                    tabcoef[i, j] = 1;// case sans coeff particulier
                    if ((i == j || i == 14 - j || j == i - 14))
                    { tabcoef[i, j] = 4; } // mot compte double

                    if ((i == 0 && (j == 3 || j == 11)) ||
                        (i == 2 && (j == 6 || j == 8)) ||
                        (i == 3 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 6 && (j == 2 || j == 6 || j == 8 || j == 12)) ||
                        (i == 7 && (j == 3 || j == 11)) ||
                        (i == 8 && (j == 2 || j == 6 || j == 8 || j == 12)) ||
                        (i == 11 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 12 && (j == 6 || j == 8)) ||
                        (i == 14 && (j == 3 || j == 11)))
                    { tabcoef[i, j] = 2; }// lettre compte double


                    if ((i == 1 && (j == 5 || j == 9)) ||
                        (i == 5 && (j == 1 || j == 5 || j == 9 || j == 13)) ||
                        (i == 9 && (j == 1 || j == 5 || j == 9 || j == 13)) ||
                        (i == 13 && (j == 5 || j == 9)))
                    { tabcoef[i, j] = 3; }// lettre compte tripple


                    if ((i == 0 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 7 && (j == 0 || j == 14)) ||
                        (i == 14 && (j == 0 || j == 7 || j == 14)))
                    { tabcoef[i, j] = 5; }// mot compte triple

                }
            }

            //initialiser tabVérif
            i = 0; j = 0;
            while (i < 15)
            {
                while (j < 15)
                {
                    tabVérif[i, j] = 0;
                    j++;
                }
                j = 0;
                i++;
            }

            //initialiser tabcurseur
            for (int k = 0; k < tabcurseur.GetLength(0); k++)
            {
                for (int l = 0; l < tabcurseur.GetLength(0); l++)
                {
                    tabcurseur[k, l] = tabLettre[27];
                }
            }


        }

        public static void JOUER(bool partieFinie)
        {
            Console.SetWindowSize(150, 84);

            int nbJoueurs = 0; int IA;
            PIECE[] tabLettre = new PIECE[29];//initialisation du sac de lettres
            Random rndNumbers = new Random();//génération de la séquence de nombres aléatoires
            bool ok = false;
            Console.Write("combien de joueur humain ?\n");
            while (!ok)//gère le cas où l'utilisateurne rentre pas un nombre
            {
                try
                {
                    nbJoueurs = int.Parse(Console.ReadLine());
                    ok = true;
                }
                catch (Exception)
                {

                    Console.Write("ce n'est pas un nombre, veuillez réssayer\n");
                }
            }
            ok = false;
            Console.Write("combien de joueur IA ?\n");
            while (!ok)//gère le cas où l'utilisateurne rentre pas un nombre
            {
                try
                {
                    IA = int.Parse(Console.ReadLine());
                    ok = true;
                }
                catch (Exception)
                {

                    Console.Write("ce n'est pas un nombre, veuillez réssayer\n");
                }
            }
            Console.Write("check2");
            Console.ReadLine();

            PIECE[,] tabMains = new PIECE[nbJoueurs, 7];
            PIECE lettre;
            JOUEUR[] tabJoueur = new JOUEUR[nbJoueurs];
            int[,] tabcoef = new int[15, 15];// initialise les valeurs des cases du plateau de jeu
            int[,] tabVérif = new int[15, 15];//initialise le tableau pour vérifier si le mot est "collé" à un mot déjà posé 
            PIECE[,] tabcurseur = new PIECE[15, 15];
            int[,] positionLettre = new int[7, 2];

            initialisation(ref tabLettre, ref tabMains, nbJoueurs, ref tabJoueur, ref tabcoef, ref tabVérif, ref tabcurseur);
            Console.Write("check2");
            Console.ReadLine();
            bool check1ereCase = true;
            bool checkAttaché = true;
            bool existe = true;
            bool verifhorizontal=false;
            bool verifvertical=false;
            string défausse;
            int score=0;
            int compte=0;
            string[] mot;
            while (!partieFinie)
            {
                int num_joueur = 1;
                while (num_joueur <= nbJoueurs)
                {
                    Console.Clear();
                    Console.Write("\n\nc'est au tour de {0}\n", tabJoueur[num_joueur - 1].nom);
                    pioche(ref tabMains, ref tabLettre, num_joueur, rndNumbers);
                    
                    do //(défausse == "non")
                    {
                        Console.Write("check1");
                        Console.ReadLine();
                        positionnerPiece(tabcurseur, tabMains, num_joueur, tabJoueur, tabcoef, tabLettre,out lettre, ref positionLettre, ref tabVérif, out verifhorizontal, out verifvertical,out défausse);
                        mot = motPosé(tabcurseur, positionLettre, verifhorizontal, verifvertical, tabcoef, out score);
                        vérification(ref tabcurseur, tabcoef, ref tabJoueur, tabLettre, lettre, ref tabVérif, ref tabMains, ref positionLettre, num_joueur, out verifvertical, out verifhorizontal, out score, out compte, out check1ereCase, out checkAttaché, mot);
                        Console.Write("check2");
                        Console.ReadLine();
                        if (!check1ereCase)
                        {
                            Console.WriteLine("\n la case du milieu doit être utilisée au premier tour, réeesayer \n");
                        }
                        Console.Write("check3");
                        Console.ReadLine();
                        if ( checkAttaché== true )
                        {
                            Console.WriteLine("\n connard, réessayer\n ");
                        }
                        Console.Write("check4");
                        Console.ReadLine();
                        if (!existe)
                        {
                            int j=0;
                            for (int k = 0; k < 7 && tabcurseur[positionLettre[k, 0], positionLettre[k, 1]].nom != ' '; k++)
                            {
                                while (tabMains[num_joueur - 1, j].nom != ' ')
                                { j++; }
                                tabMains[num_joueur - 1, j] = tabcurseur[positionLettre[k, 0], positionLettre[k, 1]];
                                tabcurseur[positionLettre[k, 0], positionLettre[k, 1]] = tabLettre[27];
                                j++;
                            } // si le mot n'existe pas, on l'efface de la grille
                            score = 0;// si le mot n'existe pas, le joueur ne remporte aucun point
                        
                        }
                    }
                    while(défausse=="non" || !check1ereCase && checkAttaché && !existe );
                    
                    /*if (existe)
                    {

                        Console.WriteLine("\nce mot vous rapporte {0} points", score);

                    }*/
                    tabJoueur[num_joueur - 1].point = tabJoueur[num_joueur - 1].point + score;
                    Console.WriteLine(" vous avez un total de {0} points", tabJoueur[num_joueur - 1].point);
                    Console.ReadLine();

                    num_joueur++;
                }
            }
            Console.ReadLine();

        }

        public static void Main(string[] args)
        {
            bool partieFinie = false;
            JOUER(partieFinie);
        }

        public static void afficheMain(ref PIECE[,] tabMains, int num_Joueur, JOUEUR[] tabJoueur, PIECE[] tabLettre)
        {
            int i;
            i = 0;

            Console.Write("\nmain de {0} :\n              =============================\n", tabJoueur[num_Joueur - 1].nom);
            Console.Write("              ");
            while (i < 7)
            {
                Console.Write("| {0} ", tabMains[num_Joueur - 1, i].nom);
                i++;
            }
            Console.Write("|");
            Console.Write(" finir le tour");
            Console.Write("\n              =============================\n");
            i = 0;
            Console.Write("leurs valeurs:");
            while (i < 7)
            {
                if (tabMains[num_Joueur - 1, i].val < 10)
                {
                    Console.Write("| {0} ", tabMains[num_Joueur - 1, i].val);
                }
                else
                { Console.Write("|{0} ", tabMains[num_Joueur - 1, i].val); }// si la valeur est supérieure à 10, on ajuste le tableau en enlevant un espace
                i++;
            }
            Console.Write("|");
            Console.Write("\n              =============================\n");
        }

        public static bool vérifMot(string mot_a_trouver)
        {
            System.Text.Encoding encoding = System.Text.Encoding.GetEncoding("iso-8859-1");
            StreamReader monStreamReader = new StreamReader("dico.txt", encoding);
            Console.Write("Lecture du dictionnaire, veuillez patienter...");
            Console.ReadLine();
            bool existe = false;
            string mot;
            int compteur = 0; // pour arréter la boucle dés que le mot est trouvé
            mot = monStreamReader.ReadLine();
            while (mot != mot_a_trouver && compteur == 0 && mot != null)
            {
                mot = monStreamReader.ReadLine();
                if (mot == mot_a_trouver)
                {
                    existe = true;
                    compteur = 1;
                }
            }
            monStreamReader.Close();
            return existe;
        }

        public static void affichecurseur(PIECE[,] tabcurseur, int k, int l)
        {


            Console.BackgroundColor = ConsoleColor.DarkGreen;
            Console.WriteLine("\n\n=============================================================");
            for (int i = 0; i < 15; i++)
            {
                for (int j = 0; j < 15; j++)
                {

                    Console.BackgroundColor = ConsoleColor.DarkGreen;
                    Console.Write("|");
                    if ((i == j || i == 14 - j || j == i - 14))
                    { Console.BackgroundColor = ConsoleColor.Magenta; } // mot compte double

                    if ((i == 0 && (j == 3 || j == 11)) ||
                        (i == 2 && (j == 6 || j == 8)) ||
                        (i == 3 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 6 && (j == 2 || j == 6 || j == 8 || j == 12)) ||
                        (i == 7 && (j == 3 || j == 11)) ||
                        (i == 8 && (j == 2 || j == 6 || j == 8 || j == 12)) ||
                        (i == 11 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 12 && (j == 6 || j == 8)) ||
                        (i == 14 && (j == 3 || j == 11)))
                    { Console.BackgroundColor = ConsoleColor.DarkCyan; }// lettre compte double


                    if ((i == 1 && (j == 5 || j == 9)) ||
                        (i == 5 && (j == 1 || j == 5 || j == 9 || j == 13)) ||
                        (i == 9 && (j == 1 || j == 5 || j == 9 || j == 13)) ||
                        (i == 13 && (j == 5 || j == 9)))
                    { Console.BackgroundColor = ConsoleColor.DarkBlue; }// lettre compte tripple


                    if ((i == 0 && (j == 0 || j == 7 || j == 14)) ||
                        (i == 7 && (j == 0 || j == 14)) ||
                        (i == 14 && (j == 0 || j == 7 || j == 14)))
                    { Console.BackgroundColor = ConsoleColor.Red; }// mot compte triple
                    if (i == k && j == l)
                    { Console.BackgroundColor = ConsoleColor.Yellow; }// couleur du curseur
                    Console.Write(' ');
                    Console.Write(tabcurseur[i, j].nom);
                    Console.Write(' ');// espace plus grand avec la valeur de la case au milieu
                }
                Console.BackgroundColor = ConsoleColor.DarkGreen;
                Console.Write("|");
                Console.BackgroundColor = ConsoleColor.Black;
                Console.WriteLine(" " + (i + 1));
                Console.BackgroundColor = ConsoleColor.DarkGreen;

                Console.WriteLine("=============================================================");
            }
            Console.BackgroundColor = ConsoleColor.Black;
            Console.WriteLine("  A   B   C   D   E   F   G   H   I   J   K   L   M   N   O");

        }

        public static void choixlettre(PIECE[,] tabMains, int num_Joueur, PIECE[,] tabcurseur, int a, int b, out PIECE lettre, JOUEUR[] tabJoueur, PIECE[] tabLettre, string défausse)
        {
            char[] curseur = new char[8];
            for (int l = 0; l < 8; l++)
            { curseur[l] = ' '; }
            ConsoleKeyInfo touche; // touche entrée pour déplacer le curseur
            curseur[0] = '*';
            curseur = new char[8];// remet le tableau curseur à 0
            int i = 0;
            int j = 0;
            do
            {

                afficheMain(ref tabMains, num_Joueur, tabJoueur, tabLettre);// affiche le tableau et la main
                Console.Write("              ");// ajustement du curseur sous la main
                for (i = 0; i < 8; i++)
                {
                    Console.Write(' ');
                    Console.Write(' ');
                    Console.Write(curseur[i]);
                    Console.Write(' ');
                }// affichage du tableau curseur
                touche = Console.ReadKey();//demande un caractère
                if (touche.Key == ConsoleKey.RightArrow && j < 7)// si flèche de droite
                {
                    curseur[j] = ' ';
                    curseur[j + 1] = '*';
                    j++;

                }
                if (touche.Key == ConsoleKey.LeftArrow && j > 0)// si flèche de gauche
                {
                    curseur[j - 1] = '*';
                    curseur[j] = ' ';
                    j--;
                }
                Console.Clear();
                affichecurseur(tabcurseur, a, b);
            }
            while (touche.Key != ConsoleKey.Enter && j >= 0 && j < 8);
            if (j == 7)
            { lettre = tabLettre[28]; }// correspond à la validation
            else
            {
                lettre = tabMains[num_Joueur - 1, j];

                tabMains[num_Joueur - 1, j] = tabLettre[27];//va effacer la case
                if (défausse == "oui")// si le lettre choisie est pour la reposer dans la pioche
                {
                    tabMains[num_Joueur - 1, j].nb_restant = tabMains[num_Joueur - 1, j].nb_restant + 1;
                }

            }


        }

        public static void positionnerPiece(PIECE[,] tabcurseur, PIECE[,] tabMains, int num_Joueur, JOUEUR[] tabJoueur, int[,] tabcoef, PIECE[] tabLettre,out PIECE lettre, ref int[,] positionLettre, ref int[,] tabVérif, out bool verifhorizontal, out bool verifvertical, out string défausse)
        {
            ConsoleKeyInfo touche;
            int compte = 0;
            int a = 0;
            int b = 0;
            int score = 0;
            // calcul le score en fonction de la valeur de la pièce et des letres compte double/simple
            verifhorizontal = false;
            verifvertical = false;

            lettre = new PIECE() { nom = ' ', val = 0, nb_restant = 0 };
            affichecurseur(tabcurseur, a, b);
            afficheMain(ref tabMains, num_Joueur, tabJoueur, tabLettre);
            Console.WriteLine("\n voulez vous vous défausser d'une ou plusieurs pièce(s) ?\n écrire oui / non ");
            défausse = Console.ReadLine();
            if (défausse == "oui")
            {
                int nbLettreEnlevee = 0;
                do
                {
                    Console.Clear();
                    affichecurseur(tabcurseur, a, b);
                    Console.WriteLine(" quelles lettres voulez-vous enlever?");
                    choixlettre(tabMains, num_Joueur, tabcurseur, a, b, out lettre, tabJoueur, tabLettre, défausse);
                    nbLettreEnlevee++;
                }
                while (lettre.nom != '&' && nbLettreEnlevee <= 7);

            }

            else
            {
                while (compte < 7 && (lettre.nom != '&') || tabcurseur[7, 7].nom == ' ')
                {
                    Console.Clear();
                    affichecurseur(tabcurseur, a, b);
                    choixlettre(tabMains, num_Joueur, tabcurseur, a, b, out lettre, tabJoueur, tabLettre, défausse);
                    if (lettre.nom != '&')// si la lettre vaut '&' c'est que l'utilisateur a validé
                    {


                        do
                        {
                            Console.Clear();
                            affichecurseur(tabcurseur, a, b);
                            afficheMain(ref tabMains, num_Joueur, tabJoueur, tabLettre);
                            touche = Console.ReadKey();// choix du caractère de déplacement
                            if (touche.Key == ConsoleKey.RightArrow && b < tabcurseur.GetLength(0) - 1)// si flèche de droite
                            {
                                b++;
                            }
                            if (touche.Key == ConsoleKey.LeftArrow && b > 0)// si flèche de gauche
                            {
                                b--;
                            }
                            if (touche.Key == ConsoleKey.DownArrow && a < tabcurseur.GetLength(1) - 1)// si flèche du bas
                            {
                                a++;
                            }
                            if (touche.Key == ConsoleKey.UpArrow && a > 0)// flèche du haut;
                            {
                                a--;
                            }

                        }
                        while (touche.Key != ConsoleKey.Enter || (tabcurseur[a, b].nom != ' ') || (compte == 1 && (positionLettre[compte - 1, 0] != a && positionLettre[compte - 1, 1] != b)) || (verifhorizontal && a != positionLettre[1, 0]) || (verifvertical && b != positionLettre[1, 1]));
                        // condition d'arrêt: validée avec entrée et case vide et si 2e coup: être sur la même ligne ou rangée que la première case
                        // si plus du 2e coup: doit être sur la ligne formée par les 2 premières lettres
                        positionLettre[compte, 0] = a;
                        positionLettre[compte, 1] = b;// permet de se rappeler de la position des lettre posées avant

                        if (compte == 1)
                        {
                            if (positionLettre[0, 0] == positionLettre[1, 0])
                            { verifhorizontal = true; }// si 2 premières lettres sur la même ligne, les autres devront l'être aussi
                            if (positionLettre[0, 1] == positionLettre[1, 1])
                            { verifvertical = true; }// si 2 premières lettres sur la même colonnes, les autres devront l'être aussi
                        }

                        tabcurseur[a, b] = lettre;
                        //if ((lettre.nom != '&'))

                            compte++;
                    }

                }
            }



        }

        public static void pioche(ref PIECE[,] tabMains, ref PIECE[] tabLettre, int num_Joueur, Random rndNumbers)
        {
            int lettreChoisie = 0;
            int nbTot = 0;
            int sommePartielle = 0;
            int j = 0; int l = 0; int k; // pour parcourir les tableaux

            j = 0;
            while (j < 7)
            {
                k = 0;
                nbTot = 0;
                while (k < 27) // on calcule le nb de pieces qui restantes
                {
                    nbTot = nbTot + tabLettre[k].nb_restant;
                    k++;
                }
                if (tabMains[num_Joueur - 1, j].nom == ' ')
                {
                    lettreChoisie = rndNumbers.Next(1, nbTot); // on prend une pièce au hasard parmi toutes les pièces restantes

                    l = 0;
                    sommePartielle = 0;
                    while (sommePartielle < lettreChoisie)// on cherche la plage de valeurs de la lettre correspondante au nombre aléatoire ( entre 1 et 9 = A entre 10 et 11 = B etc ...)
                    {
                        if (tabLettre[l].nb_restant != 0)// on saute la lettre si il n'en reste pas3
                        {
                            sommePartielle = sommePartielle + tabLettre[l].nb_restant;
                        }
                        l++;
                    }
                    tabMains[num_Joueur - 1, j] = tabLettre[l - 1];
                    tabLettre[l - 1].nb_restant = tabLettre[l - 1].nb_restant - 1;
                }
                j++;

            }
        }

        public static string[] motPosé(PIECE[,] tabcurseur, int[,] positionLettre, bool verifvertical, bool verifhorizontal, int[,] tabcoef, out int score)
        {


            int l = 0;// pour parcourir les mots existants
            score = 0;
            bool stophorizontal = true; // pour éviter les répétitions
            bool stopvertical = true; // pour éviter les répétitions
            string[] motsposés = new string[8];// stock les différents mots qui ont pu se former
            for (int j = 0; j < 7; j++)
            {
                char[] motPosé = new char[15];// permet d'enregistrer le jeme mot
                int i = 0; // pour parcourir l'horizontale ou la verticale
                int compteLettre = 0;
                int b = positionLettre[j, 1];
                int a = positionLettre[j, 0];// pour simplifier l'écriture
                int motcptdouble = 1;
                int motcpttriple = 1;
                int scoreMot = 0;

                // on cherche la première lettre ( la plus en haut)
                while (b >= 0 && tabcurseur[a, b].nom != ' ' && stopvertical)// on reste sur le plateau et on vérifie les mots verticaux
                {
                    b--;// on se décale vers le haut jusqu'à la première lettre
                }

                while (b < 14 && tabcurseur[a, b + 1].nom != ' ' && stopvertical) // on repart dans l'autre sens jusqu'a la fin du mot sans sortir du tableau et on compte le nombre de lettre dans le mot
                {
                    motPosé[i] = tabcurseur[a, b + 1].nom;

                    if (tabcoef[a, b] == 1 || tabcoef[a, b] == 2 || tabcoef[a, b] == 3)// si la lettre est posé sur une case avec un coef de 1,2 ou 3 (lettre comptes double, tripple ou case normale), 
                    {
                        scoreMot = scoreMot + tabcurseur[a, b].val * tabcoef[a, b];
                    }
                    if (tabcoef[a, b] == 4)
                    {
                        motcptdouble = motcptdouble + 2;//coefficient mot compte double qui vaut 1 de base et 2 si on pose un lettre sur une case mot compte double
                        scoreMot = scoreMot + tabcurseur[a, b].val;
                    }
                    if (tabcoef[a, b] == 5)
                    {
                        motcpttriple = motcpttriple + 3;//coefficient mot compte tripple qui vaut 1 de base et 3 si on pose un lettre sur une case mot compte tripple
                        scoreMot = scoreMot + tabcurseur[a, b].val;
                    }
                    i++;
                    b++;
                    compteLettre++;

                }
                if (verifvertical) { stopvertical = false; }
                if (compteLettre > 0)
                {
                    string motAvérifier = new string(motPosé);
                    motAvérifier = motAvérifier.Substring(0, compteLettre);

                    if (motAvérifier.Length > 1)
                    {
                        scoreMot = scoreMot * motcptdouble * motcpttriple;// le score est multiplié par les coefficients mot compte double et tripple qui valent 1 si aucune lettre n'est sur une de ces cases.
                        motsposés[l] = motAvérifier;
                        l++;
                    }


                }
                score = score + scoreMot; // on ajoute la valeur du mot identifié au score du tour

                motPosé = new char[15];// on réinitialise toutes les données avant de vérifier les mots horizontaux
                i = 0; // pour parcourir l'horizontale ou la verticale
                compteLettre = 0;
                b = positionLettre[j, 1];
                a = positionLettre[j, 0];
                scoreMot = 0;
                motcptdouble = 1;
                motcpttriple = 1;


                while (a >= 0 && tabcurseur[a, b].nom != ' ' && stophorizontal)// on reste sur le plateau et on vérifie les mots horizontaux
                {
                    a--;// on se décale sur la gauche jusqu'à la première lettre
                }

                while (a < 14 && tabcurseur[a + 1, b].nom != ' ' && stophorizontal) // on repart dans l'autre sens jusqu'a la fin du mot sans sortir du tableau et on compte le nombre de lettre dans le mot
                {
                    motPosé[i] = tabcurseur[a + 1, b].nom;
                    if (tabcoef[a, b] == 1 || tabcoef[a, b] == 2 || tabcoef[a, b] == 3)// si la lettre est posé sur une case avec un coef de 1,2 ou 3 (lettre comptes double, tripple ou case normale), 
                    {
                        scoreMot = scoreMot + tabcurseur[a, b].val * tabcoef[a, b];
                    }
                    if (tabcoef[a, b] == 4)
                    {
                        motcptdouble = motcptdouble + 2;//coefficient mot compte double qui vaut 1 de base et 2 si on pose un lettre sur une case mot compte double
                        scoreMot = scoreMot + tabcurseur[a, b].val;
                    }
                    if (tabcoef[a, b] == 5)
                    {
                        motcpttriple = motcpttriple + 3;//coefficient mot compte tripple qui vaut 1 de base et 3 si on pose un lettre sur une case mot compte tripple
                        scoreMot = scoreMot + tabcurseur[a, b].val;
                    }
                    i++;
                    a++;
                    compteLettre++;

                }


                if (verifhorizontal) { stophorizontal = false; }

                if (compteLettre > 0)
                {
                    string motAvérifier = new string(motPosé);
                    motAvérifier = motAvérifier.Substring(0, compteLettre);
                    scoreMot = scoreMot * motcptdouble * motcpttriple;// le score est multiplié par les coefficients mot compte double et tripple qui valent 1 si aucune lettre n'est sur une de ces cases.
                    if (motAvérifier.Length > 1)
                    {
                        motsposés[l] = motAvérifier;
                        l++;
                    }
                    score = score + scoreMot;
                }


            }
            for (int h = 0; h < 7; h++)
            { tabcoef[positionLettre[h, 0], positionLettre[h, 1]] = 1; }// une fois que les scores des différents mots formés on été calculés on écrase les différents coefficients qui ne pourront plus être utilisés
            return motsposés;

        }

        public static void vérification(ref PIECE[,] tabcurseur, int[,] tabcoef, ref JOUEUR[] tabJoueur, PIECE[] tabLettre, PIECE lettre, ref int[,] tabVérif, ref PIECE[,] tabMains, ref int[,] positionLettre, int num_joueur, out bool verifvertical, out bool verifhorizontal, out int score, out int compte, out bool check1ereCase, out bool checkAttaché, string[] mot)
        {
            positionLettre = new int[7, 2];
            verifhorizontal=false;
            verifvertical = false;
            score = 0;
            compte = 0;////on remet tout à 0
            check1ereCase = false;

            //si la première case n'est pas remplie, le mot est mal placé: le joueur reprend ses lettres et peut réessayer de poser son mot
                 
            check1ereCase = true;
            if (tabcurseur[7, 7].nom == ' ' && lettre.nom == '&')
            {

                int j = 0;

                for (int i = 0; i < 7 && tabcurseur[positionLettre[i, 0], positionLettre[i, 1]].nom != ' '; i++)
                {
                    while (tabMains[num_joueur - 1, j].nom != ' ')
                    { j++; }
                    tabMains[num_joueur - 1, j] = tabcurseur[positionLettre[i, 0], positionLettre[i, 1]];
                    tabcurseur[positionLettre[i, 0], positionLettre[i, 1]] = tabLettre[27];
    
                    j++;
                }// boucle pour reremplir la main du joueur
                
            }
            

            checkAttaché = true;
            if (check1ereCase)
            {

                //vérification que le mot soit "attaché" à un autre

                if (tabVérif[7, 7] == 0)// si c'est le premier tour
                {
                    int temp = 0;
                    while (temp < 7)
                    {
                        tabVérif[positionLettre[temp, 0], positionLettre[temp, 0]] = 1;
                        temp++;
                    }
                    checkAttaché = false;//== false signifie que c'est bon
                }

                else if (tabVérif[7, 7] == 1)
                {
                    int i = 0;
                    while (i < 7 && checkAttaché)
                    {
                        if (tabVérif[positionLettre[i, 0] + 1, positionLettre[i, 0]] == 1 || tabVérif[positionLettre[i, 0] - 1, positionLettre[i, 0]] == 1 || tabVérif[positionLettre[i, 0], positionLettre[i, 0]] + 1 == 1 || tabVérif[positionLettre[i, 0], positionLettre[i, 0]] - 1 == 1)
                        {
                            checkAttaché = false;
                        }
                    }
                    if (!checkAttaché)
                    {
                        i = 0;
                        while (i < 7)
                        {
                            tabVérif[positionLettre[i, 0], positionLettre[i, 0]] = 1;
                            i++;
                        }
                    }
                }
            }


            //vérification que le mot est dans le dictionnaire
            
                bool existe = true;

                for (int i = 0; i < 8 && existe; i++)// si un des mots formé n'existe pas, le mot posé est refusé
                {
                    if (mot[i] != null)
                    {
                        existe = vérifMot(mot[i]);
                    }
                    if (!existe)
                    {
                        Console.Write(" \n le mot {0} n'existe pas\n appuyer sur entrer et réessayer", mot[i]);
                        Console.ReadLine();
                    }
                }
            }
        }

    }
